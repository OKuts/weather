{"version":3,"sources":["lib/redux/types/filter.js","lib/redux/types/forecast.js","lib/redux/actions/filter.js","lib/redux/actions/forecast.js","components/Filter.js","components/Head.js","components/Current_weather.js","lib/redux/selectors/filter.js","lib/redux/selectors/forecast.js","components/Forecast.js","api/api.js","app.js","hooks/useGetWeatherData.js","helpers/filterArray.js","lib/react-query/query-client.js","lib/redux/reducers/filter.js","lib/redux/reducers/forecast.js","lib/redux/init/rootReducer.js","lib/redux/init/middleware.js","lib/redux/init/store.js","index.js"],"names":["filterTypes","Object","freeze","SET_FILTER","RESET_FILTER","forecastTypes","SET_SELECT_ID","RESET_SELECT_ID","SET_SHOW_COMPONENTS","filterActions","setFilter","filterWeather","type","payload","resetFilter","forecastActions","setForecast","id","Filter","dispatch","useDispatch","defaultValues","minTemperature","maxTemperature","sky","isRadio","isSubmittedMy","register","reset","handleSubmit","getValues","setValue","watch","formState","isDirty","useForm","mode","toggleFilter","values","changeSky","skyType","onSubmit","className","onClick","htmlFor","disabled","onInput","event","target","value","Head","selectedDayData","day","format","locale","ru","Current_weather","temperature","rain_probability","humidity","getFilterData","state","filter","filterData","getActiveForecast","forecast","selectDateId","Forecast","weatherList","activeForecast","useSelector","weatherListJSX","map","item","i","handleForecastSelect","api","data","axios","get","App","weatherData","isFetchedAfterMount","useQuery","getWeather","activeDayId","find","filteredWeatherData","slice","getFilteredForecast","useEffect","length","queryClient","QueryClient","defaultOptions","queries","queryFn","async","queryKey","options","endpoint","key","process","REACT_APP_API_URL","refetchOnWindowFocus","initialState","rootReducer","combineReducers","action","createLogger","duration","collapsed","colors","title","error","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","store","createStore","applyMiddleware","render","QueryClientProvider","client","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.c9dcbaf4.chunk.js","sourcesContent":["export const filterTypes = Object.freeze({\n    SET_FILTER:   'SET_FILTER',\n    RESET_FILTER: 'RESET_FILTER',\n});\n","export const forecastTypes = Object.freeze({\n    SET_SELECT_ID:       'SET_SELECT_ID',\n    RESET_SELECT_ID:     'RESET_SELECT_ID',\n    SET_SHOW_COMPONENTS: 'SET_SHOW_COMPONENTS',\n});\n","// Other\nimport { filterTypes } from '../types';\n\nexport const filterActions = Object.freeze({\n    setFilter: (filterWeather) => {\n        return {\n            type:    filterTypes.SET_FILTER,\n            payload: filterWeather,\n        };\n    },\n    resetFilter: () => {\n        return {\n            type: filterTypes.RESET_FILTER,\n        };\n    },\n});\n","// Other\nimport { forecastTypes } from '../types';\n\nexport const forecastActions = Object.freeze({\n    setForecast: (id) => {\n        return {\n            type:    forecastTypes.SET_SELECT_ID,\n            payload: id,\n        };\n    },\n});\n","import React  from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n// Instruments\nimport { filterActions } from '../lib/redux/actions';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n\n    const defaultValues = {\n        minTemperature: '',\n        maxTemperature: '',\n        sky:            '',\n        isRadio:        false,\n        isSubmittedMy:  false,\n    };\n    const {\n        register, reset, handleSubmit, getValues, setValue, watch,\n        formState: { isDirty },\n    } = useForm({\n        mode: 'onChange',\n        defaultValues,\n    });\n\n    const toggleFilter = handleSubmit((values) => {\n        const { maxTemperature, minTemperature, sky } = values;\n        dispatch(filterActions.setFilter({ maxTemperature, minTemperature, sky }));\n        if (getValues('isSubmittedMy')) {\n            dispatch(filterActions.resetFilter());\n            reset(defaultValues);\n        } else {\n            setValue('isSubmittedMy', true);\n        }\n    });\n\n    const changeSky = (skyType) => {\n        if (!getValues('isSubmittedMy')) {\n            setValue('isRadio', true);\n            setValue('sky', skyType);\n        }\n    };\n\n    return (\n        <form onSubmit = { toggleFilter }>\n            <div className = 'filter'>\n                <span\n                    { ...register('sky')  }\n                    onClick = { () =>  changeSky('cloudy') }\n                    className = { `checkbox ${watch('sky') === 'cloudy'  && 'selected'}` }>\n                    Облачно\n                </span>\n                <span\n                    { ...register('sky')  }\n                    onClick = { () => changeSky('sunny') }\n                    className = { `checkbox ${watch('sky') === 'sunny' && 'selected'}` }>\n                    Солнечно\n                </span>\n                <p className = 'custom-input'>\n                    <label htmlFor = 'min-temperature'>Минимальная температура</label>\n                    <input\n                        disabled = { getValues('isSubmittedMy') }\n                        onInput = { (event) => setValue('minTemperature', event.target.value) }\n                        id = 'min-temperature'\n                        type = 'number'\n                        { ...register('minTemperature')  } />\n                </p>\n                <p className = 'custom-input'>\n                    <label htmlFor = 'max-temperature'>Максимальная температура</label>\n                    <input\n                        disabled = { getValues('isSubmittedMy') }\n                        onInput = { (event) => setValue('maxTemperature', event.target.value) }\n                        id = 'max-temperature'\n                        type = 'number'\n                        { ...register('maxTemperature') } />\n                </p>\n                <button\n                    disabled = { !isDirty && !getValues('isRadio') }\n                    type = 'submit'>\n                    { !getValues('isSubmittedMy') ? 'Отфильтровать' : 'Сбросить' }\n                </button>\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\nexport const Head = ({ selectedDayData : { day, type } }) => {\n    return (\n        <div className = 'head'>\n            <div className = { `icon ${type}` }></div>\n            <div className = 'current-date'>\n                <p>{ format(day, 'eeee', { locale: ru }) }</p>\n                <span>\n                    { `${format(day, 'd')} ${format(day, 'MMMM', { locale: ru })}` }\n                </span>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n// Instruments\n\nexport const Current_weather = ({ selectedDayData }) => {\n    const { temperature, rain_probability, humidity } = selectedDayData;\n\n    return (\n        <div className = 'current-weather'>\n            <p className = 'temperature'>{ temperature }</p>\n            <p className = 'meta'>\n                <span className = 'rainy'>{ `% ${rain_probability}` }</span>\n                <span className = 'humidity'>{ `% ${humidity}` }</span>\n            </p>\n        </div>\n    );\n};\n","export const resetFilter = (state) => {\n    return state.filter;\n};\n\nexport const getFilterData = (state) => {\n    return state.filter.filterData;\n};\n","export const getActiveForecast = (state) => {\n    return state.forecast.selectDateId;\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n// Instruments\nimport { forecastActions } from '../lib/redux/actions';\nimport { getActiveForecast } from '../lib/redux/selectors';\n\nexport const Forecast = ({ weatherList }) => {\n    const dispatch = useDispatch();\n    const activeForecast = useSelector(getActiveForecast);\n\n    const handleForecastSelect = (id) => {\n        dispatch(forecastActions.setForecast(id));\n    };\n\n    const weatherListJSX = weatherList.map((item, i) => {\n        const { id, type } = item;\n\n        return (\n            <div\n                key = { id }\n                className = {\n                    // eslint-disable-next-line no-mixed-operators\n                    i === 0 && !activeForecast || id === activeForecast\n                        ? `${type} day selected`\n                        : `${type} day` }\n                onClick = { () => handleForecastSelect(id) }>\n                <p>{ format(item.day, 'eeee', { locale: ru }) }</p>\n                <span>{ item.temperature }</span>\n            </div>\n        );\n    });\n\n    return (\n        <div className = 'forecast'>\n            { weatherListJSX }\n        </div>\n    );\n};\n","// Core\nimport axios from 'axios';\n\nconst WEATHER_API_URL = process.env.REACT_APP_WEATHER_API_URL;\n\nexport const api = Object.freeze({\n    async getWeather() {\n        const { data } =  await axios.get(`${WEATHER_API_URL}`);\n\n        return data.data;\n    },\n});\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// Components\nimport {\n    Current_weather, Filter, Forecast, Head,\n} from './components';\n// Instruments\nimport { useGetWeatherData } from './hooks';\nimport { getActiveForecast, getFilterData } from './lib/redux/selectors';\nimport { forecastActions } from './lib/redux/actions';\nimport { getFilteredForecast } from './helpers';\n\nexport const App = () => {\n    const { data: weatherData, isFetchedAfterMount } = useGetWeatherData();\n    const dispatch = useDispatch();\n    const activeDayId = useSelector(getActiveForecast);\n    const filterData = useSelector(getFilterData);\n    const selectedDayData = weatherData?.find((item) => item.id === activeDayId);\n    const filteredWeatherData = getFilteredForecast(weatherData, filterData);\n\n    useEffect(() => {\n        if (filteredWeatherData.length) {\n            dispatch(forecastActions.setForecast(filteredWeatherData[ 0 ].id));\n        }\n    }, [isFetchedAfterMount, filterData]);\n\n    useEffect(() => {\n        if (!filteredWeatherData[ 0 ]) {\n            dispatch(forecastActions.setForecast(null));\n        }\n    }, [filteredWeatherData]);\n\n    return (\n        <main>\n            <Filter />\n            { filteredWeatherData && activeDayId\n                ? (\n                    <>\n                        <Head selectedDayData = { selectedDayData } />\n                        <Current_weather selectedDayData = { selectedDayData } />\n                        <Forecast weatherList = { filteredWeatherData } />\n                    </>\n                )\n                : (\n                    <div className = 'forecast'>\n                        <p className = 'message'>По заданным критериям нет доступных дней</p>\n                    </div>\n                )\n            }\n            { !weatherData && <h1>Loading ....</h1> }\n        </main>\n    );\n};\n","/* Core */\nimport { useQuery } from 'react-query';\n\n/* Other */\nimport { api } from '../api';\n\nexport const useGetWeatherData = () => {\n    const query = useQuery('data', api.getWeather);\n\n    return query;\n};\n","export const getFilteredForecast = (weatherData, { sky, maxTemperature, minTemperature }) => {\n    if (!weatherData) return [];\n\n    return weatherData.filter((day) => {\n        if (maxTemperature && day.temperature <= maxTemperature) return false;\n        if (maxTemperature && day.temperature >= minTemperature) return false;\n        if (sky && day.type !== sky) return false;\n\n        return true;\n    }).slice(0, 7);\n};\n","/* Core */\nimport { QueryClient } from 'react-query';\nimport axios from 'axios';\n\nconst defaultQueryFn = async (options) => {\n    const { queryKey } = options;\n\n    let endpoint = queryKey?.[ 0 ];\n\n    if (queryKey && queryKey?.length > 1) {\n        for (const key of queryKey.slice(1)) {\n            endpoint += `/${key}`;\n        }\n    }\n\n    const response = await axios.get(\n        `${process.env.REACT_APP_API_URL}/${endpoint}`,\n    );\n\n    return response.data;\n};\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            queryFn:              defaultQueryFn,\n            refetchOnWindowFocus: false,\n        },\n    },\n});\n","// Other\nimport { filterTypes } from '../types';\n\nconst initialState = {\n    filterData: {\n        sky:            '',\n        maxTemperature: '',\n        minTemperature: '',\n    },\n};\n\nexport const filterReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case filterTypes.SET_FILTER: {\n        return {\n            ...state,\n            filterData: {\n                sky:            action.payload.sky,\n                maxTemperature: action.payload.maxTemperature,\n                minTemperature: action.payload.minTemperature,\n            },\n        };\n    }\n    case filterTypes.RESET_FILTER:\n        return {\n            ...state,\n            filterData: {\n                sky:            '',\n                maxTemperature: '',\n                minTemperature: '',\n            },\n        };\n    default:\n        return state;\n    }\n};\n","// Other\nimport { forecastTypes } from '../types';\n\nconst initialState = {\n    selectDateId: null,\n};\n\nexport const forecastReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case forecastTypes.SET_SELECT_ID: {\n        return {\n            ...state,\n            selectDateId: action.payload,\n        };\n    }\n    default: {\n        return state;\n    }\n    }\n};\n","// Core\nimport { combineReducers } from 'redux';\n\n// Reducers\nimport {\n    filterReducer as filter,\n    forecastReducer as forecast,\n} from '../reducers';\n\nexport const rootReducer = combineReducers({\n    filter, forecast,\n});\n","// Core\nimport { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nexport const logger = createLogger({\n    duration:  true,\n    collapsed: true,\n    colors:    {\n        title: (action) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    },\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware = [];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport {\n    composeEnhancers,\n    middleware,\n} from './middleware';\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n);\n","// Core\nimport { render } from 'react-dom';\nimport { QueryClientProvider } from 'react-query';\nimport { Provider } from 'react-redux';\n\n// Components\nimport { App } from './app';\n\n// Instruments\nimport './theme/index.scss';\nimport { queryClient } from './lib/react-query';\nimport { store } from './lib/redux/init/store';\n\nrender(\n    <Provider store = { store }>\n        <QueryClientProvider client = { queryClient }>\n            <App />\n        </QueryClientProvider>\n    </Provider>,\n    document.getElementById('root'),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log('%c Приложение успешно запущено ', 'background: #00ff00; color: #000000; padding: 2.5px;');\n    },\n);\n"],"sourceRoot":""}